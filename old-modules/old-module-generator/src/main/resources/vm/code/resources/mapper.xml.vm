<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${generatorBo.packageName}.${generatorBo.moduleName}.mapper.${tablesBo.className}Mapper">

    <resultMap id="baseResultMap"
               type="${generatorBo.packageName}.${generatorBo.moduleName}.domain.${tablesBo.className}">
        #foreach ($columnsBo in $columnsBos)
            #if(${columnsBo.primaryKey})
                ##        <result property="${columnsBo.javaFiled}" column="${columnsBo.columnName}" javaType="${columnsBo.javaFieldType}" jdbcType="INTEGER"/>
                ##        因为数据库的元数据中的 jdbcType 与 代码中定义的枚举有出入，所以不生成 jdbcType org.apache.ibatis.type.JdbcType、
                ##        org.apache.ibatis.type.TypeAliasRegistry.TypeAliasRegistry 就没有 LocalDateTime 的类型处理器？？？？？。。。。
                ## 不是枚举类型才输出
                <id property="${columnsBo.javaFiled}" column="${columnsBo.columnName}"#if(${columnsBo.isEnum})#else
                    javaType="${columnsBo.columnClassName}"#end jdbcType="${columnsBo.mybatisJdbcType}"/>
            #else
                <result property="${columnsBo.javaFiled}" column="${columnsBo.columnName}"
                        jdbcType="${columnsBo.mybatisJdbcType}" #if(${columnsBo.isEnum}) #else
                        javaType="${columnsBo.columnClassName}"#end
                        #if(${columnsBo.isEnum})typeHandler="org.apache.ibatis.type.EnumTypeHandler"#end />
            #end
        #end
    </resultMap>

    <sql id="sel">
        select
            #foreach ($columnsBo in $columnsBos)
                ${columnsBo.columnName}#if($foreach.hasNext), #end
            #end
        from ${tablesBo.tableName}
    </sql>

</mapper>